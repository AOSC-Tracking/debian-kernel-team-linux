From b290ebe2c46d01b742b948ce03f09e8a3efb9a92 Mon Sep 17 00:00:00 2001
From: Heiko Carstens <heiko.carstens@de.ibm.com>
Date: Wed, 14 Jan 2009 14:14:06 +0100
Subject: [PATCH 14/44] [CVE-2009-0029] System call wrappers part 04

From: Heiko Carstens <heiko.carstens@de.ibm.com>

commit b290ebe2c46d01b742b948ce03f09e8a3efb9a92 upstream.

Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Adjusted to apply to Debian's 2.6.24 by dann frazier <dannf@debian.org>

diff -urpN linux-source-2.6.24.orig/kernel/acct.c linux-source-2.6.24/kernel/acct.c
--- linux-source-2.6.24.orig/kernel/acct.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/kernel/acct.c	2009-01-21 00:58:10.000000000 -0700
@@ -249,7 +249,7 @@ static int acct_on(char *name)
  * should be written. If the filename is NULL, accounting will be
  * shutdown.
  */
-asmlinkage long sys_acct(const char __user *name)
+SYSCALL_DEFINE1(acct, const char __user *, name)
 {
 	int error;
 
diff -urpN linux-source-2.6.24.orig/kernel/capability.c linux-source-2.6.24/kernel/capability.c
--- linux-source-2.6.24.orig/kernel/capability.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/kernel/capability.c	2009-01-21 00:58:10.000000000 -0700
@@ -36,7 +36,7 @@ static DEFINE_SPINLOCK(task_capability_l
  *
  * Returns 0 on success and < 0 on error.
  */
-asmlinkage long sys_capget(cap_user_header_t header, cap_user_data_t dataptr)
+SYSCALL_DEFINE2(capget, cap_user_header_t, header, cap_user_data_t, dataptr)
 {
 	int ret = 0;
 	pid_t pid;
@@ -165,7 +165,7 @@ static inline int cap_set_all(kernel_cap
  *
  * Returns 0 on success and < 0 on error.
  */
-asmlinkage long sys_capset(cap_user_header_t header, const cap_user_data_t data)
+SYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data)
 {
 	kernel_cap_t inheritable, permitted, effective;
 	__u32 version;
diff -urpN linux-source-2.6.24.orig/kernel/exec_domain.c linux-source-2.6.24/kernel/exec_domain.c
--- linux-source-2.6.24.orig/kernel/exec_domain.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/kernel/exec_domain.c	2009-01-21 00:58:10.000000000 -0700
@@ -189,8 +189,7 @@ get_exec_domain_list(char *page)
 	return (len);
 }
 
-asmlinkage long
-sys_personality(u_long personality)
+SYSCALL_DEFINE1(personality, u_long, personality)
 {
 	u_long old = current->personality;
 
diff -urpN linux-source-2.6.24.orig/kernel/itimer.c linux-source-2.6.24/kernel/itimer.c
--- linux-source-2.6.24.orig/kernel/itimer.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/kernel/itimer.c	2009-01-21 00:58:10.000000000 -0700
@@ -109,7 +109,7 @@ int do_getitimer(int which, struct itime
 	return 0;
 }
 
-asmlinkage long sys_getitimer(int which, struct itimerval __user *value)
+SYSCALL_DEFINE2(getitimer, int, which, struct itimerval __user *, value)
 {
 	int error = -EFAULT;
 	struct itimerval get_buffer;
diff -urpN linux-source-2.6.24.orig/kernel/signal.c linux-source-2.6.24/kernel/signal.c
--- linux-source-2.6.24.orig/kernel/signal.c	2009-01-21 00:05:39.000000000 -0700
+++ linux-source-2.6.24/kernel/signal.c	2009-01-21 00:58:10.000000000 -0700
@@ -2418,8 +2418,7 @@ out:
 
 #ifdef __ARCH_WANT_SYS_SIGPENDING
 
-asmlinkage long
-sys_sigpending(old_sigset_t __user *set)
+SYSCALL_DEFINE1(sigpending, old_sigset_t __user *, set)
 {
 	return do_sigpending(set, sizeof(*set));
 }
@@ -2430,8 +2429,8 @@ sys_sigpending(old_sigset_t __user *set)
 /* Some platforms have their own version with special arguments others
    support only sys_rt_sigprocmask.  */
 
-asmlinkage long
-sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset)
+SYSCALL_DEFINE3(sigprocmask, int, how, old_sigset_t __user *, set,
+		old_sigset_t __user *, oset)
 {
 	int error;
 	old_sigset_t old_set, new_set;
diff -urpN linux-source-2.6.24.orig/kernel/sys.c linux-source-2.6.24/kernel/sys.c
--- linux-source-2.6.24.orig/kernel/sys.c	2009-01-21 00:57:05.000000000 -0700
+++ linux-source-2.6.24/kernel/sys.c	2009-01-21 00:58:10.000000000 -0700
@@ -912,7 +912,7 @@ SYSCALL_DEFINE1(times, struct tms __user
  * Auch. Had to add the 'did_exec' flag to conform completely to POSIX.
  * LBT 04.03.94
  */
-asmlinkage long sys_setpgid(pid_t pid, pid_t pgid)
+SYSCALL_DEFINE2(setpgid, pid_t, pid, pid_t, pgid)
 {
 	struct task_struct *p;
 	struct task_struct *group_leader = current->group_leader;
@@ -1045,7 +1045,7 @@ SYSCALL_DEFINE1(getsid, pid_t, pid)
 	}
 }
 
-asmlinkage long sys_setsid(void)
+SYSCALL_DEFINE0(setsid)
 {
 	struct task_struct *group_leader = current->group_leader;
 	pid_t session;
@@ -1290,7 +1290,7 @@ out:
  *	without another task interfering.
  */
  
-asmlinkage long sys_setgroups(int gidsetsize, gid_t __user *grouplist)
+SYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist)
 {
 	struct group_info *group_info;
 	int retval;
