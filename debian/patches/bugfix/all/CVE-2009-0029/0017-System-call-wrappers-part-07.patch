From 754fe8d297bfae7b77f7ce866e2fb0c5fb186506 Mon Sep 17 00:00:00 2001
From: Heiko Carstens <heiko.carstens@de.ibm.com>
Date: Wed, 14 Jan 2009 14:14:09 +0100
Subject: [PATCH 17/44] [CVE-2009-0029] System call wrappers part 07

From: Heiko Carstens <heiko.carstens@de.ibm.com>

commit 754fe8d297bfae7b77f7ce866e2fb0c5fb186506 upstream.

Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Backported to Debian's 2.6.24 by dann frazier <dannf@debian.org>

diff -urpN linux-source-2.6.24.orig/kernel/exit.c linux-source-2.6.24/kernel/exit.c
--- linux-source-2.6.24.orig/kernel/exit.c	2009-01-21 00:05:39.000000000 -0700
+++ linux-source-2.6.24/kernel/exit.c	2009-01-21 01:00:45.000000000 -0700
@@ -1065,7 +1065,7 @@ NORET_TYPE void complete_and_exit(struct
 
 EXPORT_SYMBOL(complete_and_exit);
 
-asmlinkage long sys_exit(int error_code)
+SYSCALL_DEFINE1(exit, int, error_code)
 {
 	do_exit((error_code&0xff)<<8);
 }
@@ -1104,7 +1104,7 @@ do_group_exit(int exit_code)
  * wait4()-ing process will get the correct exit code - even if this
  * thread is not the thread group leader.
  */
-asmlinkage long sys_exit_group(int error_code)
+SYSCALL_DEFINE1(exit_group, int, error_code)
 {
 	do_group_exit((error_code & 0xff) << 8);
 	/* NOTREACHED */
@@ -1728,8 +1728,8 @@ asmlinkage long sys_waitid(int which, pi
 	return ret;
 }
 
-asmlinkage long sys_wait4(pid_t pid, int __user *stat_addr,
-			  int options, struct rusage __user *ru)
+SYSCALL_DEFINE4(wait4, pid_t, pid, int __user *, stat_addr,
+		int, options, struct rusage __user *, ru)
 {
 	long ret;
 
diff -urpN linux-source-2.6.24.orig/kernel/kexec.c linux-source-2.6.24/kernel/kexec.c
--- linux-source-2.6.24.orig/kernel/kexec.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/kernel/kexec.c	2009-01-21 00:59:55.000000000 -0700
@@ -922,9 +922,8 @@ struct kimage *kexec_crash_image;
  */
 static int kexec_lock;
 
-asmlinkage long sys_kexec_load(unsigned long entry, unsigned long nr_segments,
-				struct kexec_segment __user *segments,
-				unsigned long flags)
+SYSCALL_DEFINE4(kexec_load, unsigned long, entry, unsigned long, nr_segments,
+		struct kexec_segment __user *, segments, unsigned long, flags)
 {
 	struct kimage **dest_image, *image;
 	int locked;
diff -urpN linux-source-2.6.24.orig/kernel/sched.c linux-source-2.6.24/kernel/sched.c
--- linux-source-2.6.24.orig/kernel/sched.c	2009-01-21 00:59:21.000000000 -0700
+++ linux-source-2.6.24/kernel/sched.c	2009-01-21 00:59:55.000000000 -0700
@@ -4881,8 +4881,8 @@ SYSCALL_DEFINE1(sched_get_priority_min, 
  * this syscall writes the default timeslice value of a given process
  * into the user-space timespec buffer. A value of '0' means infinity.
  */
-asmlinkage
-long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval)
+SYSCALL_DEFINE4(sched_rr_get_interval, pid_t, pid,
+		struct timespec __user *, interval)
 {
 	struct task_struct *p;
 	unsigned int time_slice;
diff -urpN linux-source-2.6.24.orig/kernel/signal.c linux-source-2.6.24/kernel/signal.c
--- linux-source-2.6.24.orig/kernel/signal.c	2009-01-21 00:58:10.000000000 -0700
+++ linux-source-2.6.24/kernel/signal.c	2009-01-21 00:59:55.000000000 -0700
@@ -1947,7 +1947,7 @@ EXPORT_SYMBOL(unblock_all_signals);
  * System call entry points.
  */
 
-asmlinkage long sys_restart_syscall(void)
+SYSCALL_DEFINE0(restart_syscall)
 {
 	struct restart_block *restart = &current_thread_info()->restart_block;
 	return restart->fn(restart);
diff -urpN linux-source-2.6.24.orig/kernel/sys.c linux-source-2.6.24/kernel/sys.c
--- linux-source-2.6.24.orig/kernel/sys.c	2009-01-21 00:58:10.000000000 -0700
+++ linux-source-2.6.24/kernel/sys.c	2009-01-21 00:59:55.000000000 -0700
@@ -131,7 +131,7 @@ out:
 	return error;
 }
 
-asmlinkage long sys_setpriority(int which, int who, int niceval)
+SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
 	struct task_struct *g, *p;
 	struct user_struct *user;
@@ -195,7 +195,7 @@ out:
  * has been offset by 20 (ie it returns 40..1 instead of -20..19)
  * to stay compatible.
  */
-asmlinkage long sys_getpriority(int which, int who)
+SYSCALL_DEFINE2(getpriority, int, which, int, who)
 {
 	struct task_struct *g, *p;
 	struct user_struct *user;
@@ -361,7 +361,8 @@ EXPORT_SYMBOL_GPL(kernel_power_off);
  *
  * reboot doesn't sync: do that yourself before calling this.
  */
-asmlinkage long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user * arg)
+SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,
+		void __user *, arg)
 {
 	char buffer[256];
 
diff -urpN linux-source-2.6.24.orig/net/socket.c linux-source-2.6.24/net/socket.c
--- linux-source-2.6.24.orig/net/socket.c	2008-01-24 15:58:37.000000000 -0700
+++ linux-source-2.6.24/net/socket.c	2009-01-21 00:59:55.000000000 -0700
@@ -1755,7 +1755,7 @@ out_put:
  *	Shutdown a socket.
  */
 
-asmlinkage long sys_shutdown(int fd, int how)
+SYSCALL_DEFINE2(shutdown, int, fd, int, how)
 {
 	int err, fput_needed;
 	struct socket *sock;
