From: Ben Hutchings <benh@debian.org>
Date: Mon, 12 Apr 2021 15:56:18 +0200
Subject: net: Avoid ABI change in 4.9.246
Forwarded: not-needed

Commit 3ec3f8916925 "can: dev: Move device back to init netns on
owning netns delete" added a flag member to struct rtnl_link_ops,
which changes the ABI for much of the networking API.

Since only one specific rtnl_link_ops structure needs special
treatment, replace the flag and flag test with a test on the existing
"kind" member.

---
--- a/drivers/net/can/dev.c
+++ b/drivers/net/can/dev.c
@@ -1084,7 +1084,6 @@ static void can_dellink(struct net_devic
 
 static struct rtnl_link_ops can_link_ops __read_mostly = {
 	.kind		= "can",
-	.netns_refund	= true,
 	.maxtype	= IFLA_CAN_MAX,
 	.policy		= can_policy,
 	.setup		= can_setup,
--- a/include/net/rtnetlink.h
+++ b/include/net/rtnetlink.h
@@ -28,7 +28,6 @@ static inline int rtnl_msg_family(const
  *
  *	@list: Used internally
  *	@kind: Identifier
- *	@netns_refund: Physical device, move to init_net on netns exit
  *	@maxtype: Highest device specific netlink attribute number
  *	@policy: Netlink policy for device specific attribute validation
  *	@validate: Optional validation function for netlink/changelink parameters
@@ -85,7 +84,6 @@ struct rtnl_link_ops {
 	unsigned int		(*get_num_tx_queues)(void);
 	unsigned int		(*get_num_rx_queues)(void);
 
-	bool			netns_refund;
 	int			slave_maxtype;
 	const struct nla_policy	*slave_policy;
 	int			(*slave_validate)(struct nlattr *tb[],
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -8300,7 +8300,9 @@ static void __net_exit default_device_ex
 			continue;
 
 		/* Leave virtual devices for the generic cleanup */
-		if (dev->rtnl_link_ops && !dev->rtnl_link_ops->netns_refund)
+		if (dev->rtnl_link_ops &&
+		    !(dev->rtnl_link_ops->kind &&
+		      strcmp(dev->rtnl_link_ops->kind, "can") == 0))
 			continue;
 
 		/* Push remaining network devices to init_net */
