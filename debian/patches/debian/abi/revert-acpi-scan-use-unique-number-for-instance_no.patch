From: Ben Hutchings <benh@debian.org>
Date: Mon, 12 Apr 2021 15:22:07 +0200
Subject: Revert "ACPI: scan: Use unique number for instance_no"
Forwarded: not-needed

This reverts commit e5cdbe419004e172f642e876a671a9ff1c52f8bb.  It
causes an ABI change for ACPI and there's no obvious way to avoid
that.  As the bug is not very serious, defer the fix until we next
need an ABI bump.

---
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -18,8 +18,6 @@
 #ifndef _ACPI_INTERNAL_H_
 #define _ACPI_INTERNAL_H_
 
-#include <linux/idr.h>
-
 #define PREFIX "ACPI: "
 
 int early_acpi_osi_init(void);
@@ -99,11 +97,9 @@ void acpi_scan_table_handler(u32 event,
 
 extern struct list_head acpi_bus_id_list;
 
-#define ACPI_MAX_DEVICE_INSTANCES	4096
-
 struct acpi_device_bus_id {
 	const char *bus_id;
-	struct ida instance_ida;
+	unsigned int instance_no;
 	struct list_head node;
 };
 
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -481,8 +481,9 @@ static void acpi_device_del(struct acpi_
 	list_for_each_entry(acpi_device_bus_id, &acpi_bus_id_list, node)
 		if (!strcmp(acpi_device_bus_id->bus_id,
 			    acpi_device_hid(device))) {
-			ida_simple_remove(&acpi_device_bus_id->instance_ida, device->pnp.instance_no);
-			if (ida_is_empty(&acpi_device_bus_id->instance_ida)) {
+			if (acpi_device_bus_id->instance_no > 0)
+				acpi_device_bus_id->instance_no--;
+			else {
 				list_del(&acpi_device_bus_id->node);
 				kfree_const(acpi_device_bus_id->bus_id);
 				kfree(acpi_device_bus_id);
@@ -633,21 +634,6 @@ static struct acpi_device_bus_id *acpi_d
 	return NULL;
 }
 
-static int acpi_device_set_name(struct acpi_device *device,
-				struct acpi_device_bus_id *acpi_device_bus_id)
-{
-	struct ida *instance_ida = &acpi_device_bus_id->instance_ida;
-	int result;
-
-	result = ida_simple_get(instance_ida, 0, ACPI_MAX_DEVICE_INSTANCES, GFP_KERNEL);
-	if (result < 0)
-		return result;
-
-	device->pnp.instance_no = result;
-	dev_set_name(&device->dev, "%s:%02x", acpi_device_bus_id->bus_id, result);
-	return 0;
-}
-
 int acpi_device_add(struct acpi_device *device,
 		    void (*release)(struct device *))
 {
@@ -682,9 +668,7 @@ int acpi_device_add(struct acpi_device *
 
 	acpi_device_bus_id = acpi_device_bus_id_match(acpi_device_hid(device));
 	if (acpi_device_bus_id) {
-		result = acpi_device_set_name(device, acpi_device_bus_id);
-		if (result)
-			goto err_unlock;
+		acpi_device_bus_id->instance_no++;
 	} else {
 		acpi_device_bus_id = kzalloc(sizeof(*acpi_device_bus_id),
 					     GFP_KERNEL);
@@ -700,16 +684,9 @@ int acpi_device_add(struct acpi_device *
 			goto err_unlock;
 		}
 
-		ida_init(&acpi_device_bus_id->instance_ida);
-
-		result = acpi_device_set_name(device, acpi_device_bus_id);
-		if (result) {
-			kfree(acpi_device_bus_id);
-			goto err_unlock;
-		}
-
 		list_add_tail(&acpi_device_bus_id->node, &acpi_bus_id_list);
 	}
+	dev_set_name(&device->dev, "%s:%02x", acpi_device_bus_id->bus_id, acpi_device_bus_id->instance_no);
 
 	if (device->parent)
 		list_add_tail(&device->node, &device->parent->children);
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -241,7 +241,6 @@ struct acpi_pnp_type {
 
 struct acpi_device_pnp {
 	acpi_bus_id bus_id;		/* Object name */
-	int instance_no;		/* Instance number of this object */
 	struct acpi_pnp_type type;	/* ID type */
 	acpi_bus_address bus_address;	/* _ADR */
 	char *unique_id;		/* _UID */
