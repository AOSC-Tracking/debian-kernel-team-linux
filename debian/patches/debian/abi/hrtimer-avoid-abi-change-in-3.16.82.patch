From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 11 Feb 2020 21:31:14 +0000
Subject: hrtimer: Avoid ABI change in 3.16.82
Forwarded: not-needed

Commit 2c2d6d5f193b "hrtimer: Get rid of the resolution field in
hrtimer_clock_base" replaced hrtimer_base::resolution, which was set
to the same value in all instances, with a global variable.  Although
the hrtimer structures shouldn't be used by external modules, they are
visible and this changes the ABI hash for some symbols.

Add the structure field back and initialise it as before.

---
--- a/include/linux/hrtimer.h
+++ b/include/linux/hrtimer.h
@@ -137,6 +137,7 @@ struct hrtimer_sleeper {
  *			timer to a base on another cpu.
  * @clockid:		clock id for per_cpu support
  * @active:		red black tree root node for the active timers
+ * @resolution:		the resolution of the clock, in nanoseconds
  * @get_time:		function to retrieve the current time of the clock
  * @softirq_time:	the time when running the hrtimer queue in the softirq
  * @offset:		offset of this clock to the monotonic base
@@ -146,6 +147,7 @@ struct hrtimer_clock_base {
 	int			index;
 	clockid_t		clockid;
 	struct timerqueue_head	active;
+	ktime_t			resolution;
 	ktime_t			(*get_time)(void);
 	ktime_t			softirq_time;
 	ktime_t			offset;
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -71,21 +71,25 @@ DEFINE_PER_CPU(struct hrtimer_cpu_base,
 			.index = HRTIMER_BASE_MONOTONIC,
 			.clockid = CLOCK_MONOTONIC,
 			.get_time = &ktime_get,
+			.resolution = KTIME_LOW_RES,
 		},
 		{
 			.index = HRTIMER_BASE_REALTIME,
 			.clockid = CLOCK_REALTIME,
 			.get_time = &ktime_get_real,
+			.resolution = KTIME_LOW_RES,
 		},
 		{
 			.index = HRTIMER_BASE_BOOTTIME,
 			.clockid = CLOCK_BOOTTIME,
 			.get_time = &ktime_get_boottime,
+			.resolution = KTIME_LOW_RES,
 		},
 		{
 			.index = HRTIMER_BASE_TAI,
 			.clockid = CLOCK_TAI,
 			.get_time = &ktime_get_clocktai,
+			.resolution = KTIME_LOW_RES,
 		},
 	}
 };
@@ -704,7 +708,7 @@ static void retrigger_next_event(void *a
  */
 static int hrtimer_switch_to_hres(void)
 {
-	int cpu = smp_processor_id();
+	int i, cpu = smp_processor_id();
 	struct hrtimer_cpu_base *base = &per_cpu(hrtimer_bases, cpu);
 	unsigned long flags;
 
@@ -720,6 +724,8 @@ static int hrtimer_switch_to_hres(void)
 		return 0;
 	}
 	base->hres_active = 1;
+	for (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++)
+		base->clock_base[i].resolution = KTIME_HIGH_RES;
 	hrtimer_resolution = HIGH_RES_NSEC;
 
 	tick_setup_sched_timer();
